// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/disaster37/monitoring-operator/pkg/centreonhandler (interfaces: CentreonHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	centreonhandler "github.com/disaster37/monitoring-operator/pkg/centreonhandler"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockCentreonHandler is a mock of CentreonHandler interface.
type MockCentreonHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCentreonHandlerMockRecorder
}

// MockCentreonHandlerMockRecorder is the mock recorder for MockCentreonHandler.
type MockCentreonHandlerMockRecorder struct {
	mock *MockCentreonHandler
}

// NewMockCentreonHandler creates a new mock instance.
func NewMockCentreonHandler(ctrl *gomock.Controller) *MockCentreonHandler {
	mock := &MockCentreonHandler{ctrl: ctrl}
	mock.recorder = &MockCentreonHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCentreonHandler) EXPECT() *MockCentreonHandlerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockCentreonHandler) Auth() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockCentreonHandlerMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockCentreonHandler)(nil).Auth))
}

// CreateService mocks base method.
func (m *MockCentreonHandler) CreateService(arg0 *centreonhandler.CentreonService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockCentreonHandlerMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockCentreonHandler)(nil).CreateService), arg0)
}

// CreateServiceGroup mocks base method.
func (m *MockCentreonHandler) CreateServiceGroup(arg0 *centreonhandler.CentreonServiceGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServiceGroup indicates an expected call of CreateServiceGroup.
func (mr *MockCentreonHandlerMockRecorder) CreateServiceGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceGroup", reflect.TypeOf((*MockCentreonHandler)(nil).CreateServiceGroup), arg0)
}

// DeleteService mocks base method.
func (m *MockCentreonHandler) DeleteService(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockCentreonHandlerMockRecorder) DeleteService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockCentreonHandler)(nil).DeleteService), arg0, arg1)
}

// DeleteServiceGroup mocks base method.
func (m *MockCentreonHandler) DeleteServiceGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServiceGroup indicates an expected call of DeleteServiceGroup.
func (mr *MockCentreonHandlerMockRecorder) DeleteServiceGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceGroup", reflect.TypeOf((*MockCentreonHandler)(nil).DeleteServiceGroup), arg0)
}

// DiffService mocks base method.
func (m *MockCentreonHandler) DiffService(arg0, arg1 *centreonhandler.CentreonService, arg2 []string) (*centreonhandler.CentreonServiceDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiffService", arg0, arg1, arg2)
	ret0, _ := ret[0].(*centreonhandler.CentreonServiceDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffService indicates an expected call of DiffService.
func (mr *MockCentreonHandlerMockRecorder) DiffService(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffService", reflect.TypeOf((*MockCentreonHandler)(nil).DiffService), arg0, arg1, arg2)
}

// DiffServiceGroup mocks base method.
func (m *MockCentreonHandler) DiffServiceGroup(arg0, arg1 *centreonhandler.CentreonServiceGroup, arg2 []string) (*centreonhandler.CentreonServiceGroupDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiffServiceGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(*centreonhandler.CentreonServiceGroupDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffServiceGroup indicates an expected call of DiffServiceGroup.
func (mr *MockCentreonHandlerMockRecorder) DiffServiceGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffServiceGroup", reflect.TypeOf((*MockCentreonHandler)(nil).DiffServiceGroup), arg0, arg1, arg2)
}

// GetService mocks base method.
func (m *MockCentreonHandler) GetService(arg0, arg1 string) (*centreonhandler.CentreonService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1)
	ret0, _ := ret[0].(*centreonhandler.CentreonService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockCentreonHandlerMockRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockCentreonHandler)(nil).GetService), arg0, arg1)
}

// GetServiceGroup mocks base method.
func (m *MockCentreonHandler) GetServiceGroup(arg0 string) (*centreonhandler.CentreonServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceGroup", arg0)
	ret0, _ := ret[0].(*centreonhandler.CentreonServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceGroup indicates an expected call of GetServiceGroup.
func (mr *MockCentreonHandlerMockRecorder) GetServiceGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceGroup", reflect.TypeOf((*MockCentreonHandler)(nil).GetServiceGroup), arg0)
}

// SetLogger mocks base method.
func (m *MockCentreonHandler) SetLogger(arg0 *logrus.Entry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockCentreonHandlerMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockCentreonHandler)(nil).SetLogger), arg0)
}

// UpdateService mocks base method.
func (m *MockCentreonHandler) UpdateService(arg0 *centreonhandler.CentreonServiceDiff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockCentreonHandlerMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockCentreonHandler)(nil).UpdateService), arg0)
}

// UpdateServiceGroup mocks base method.
func (m *MockCentreonHandler) UpdateServiceGroup(arg0 *centreonhandler.CentreonServiceGroupDiff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceGroup indicates an expected call of UpdateServiceGroup.
func (mr *MockCentreonHandlerMockRecorder) UpdateServiceGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceGroup", reflect.TypeOf((*MockCentreonHandler)(nil).UpdateServiceGroup), arg0)
}
