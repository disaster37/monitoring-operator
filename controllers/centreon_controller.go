package controllers

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/disaster37/monitoring-operator/api/v1alpha1"
	"github.com/disaster37/operator-sdk-extra/pkg/controller"
	"github.com/disaster37/operator-sdk-extra/pkg/helper"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// CentreonController permit to handle all Centreon resource templating
type CentreonController struct {
	client.Client
	log *logrus.Entry
}

// SetLogger permit to set logger on Centreon controller
func (r *CentreonController) SetLogger(log *logrus.Entry) {
	r.log = log
}

// createOrUpdateCentreonServiceFromTemplate permit to create or update CentreonService computing from templates
func (r *CentreonController) createOrUpdateCentreonServiceFromTemplate(ctx context.Context, resource client.Object, data map[string]interface{}, meta interface{}) (res ctrl.Result, err error) {
	var d any

	d, err = helper.Get(data, "centreonServiceCompareResources")
	if err != nil {
		return res, err
	}
	listCompareResource := d.([]CompareResource)
	if listCompareResource == nil {
		return res, nil
	}

	for _, compareResource := range listCompareResource {
		if compareResource.Diff.NeedCreate {
			r.log.Debugf("Create CentreonService %s/%s", compareResource.Expected.GetNamespace(), compareResource.Expected.GetName())
			if err = r.Client.Create(ctx, compareResource.Expected); err != nil {
				return res, errors.Wrapf(err, "Error when create CentreonService %s", compareResource.Expected.GetName())
			}
		} else if compareResource.Diff.NeedUpdate {
			r.log.Debugf("Update CentreonService %s/%s", compareResource.Current.GetNamespace(), compareResource.Current.GetName())
			if err = r.Client.Update(ctx, compareResource.Current); err != nil {
				return res, errors.Wrapf(err, "Error when update CentreonService %s", compareResource.Current.GetName())
			}
		}
	}

	return res, nil
}

// diffCentreonService permit to diff CentreonService generated by templating
func (r *CentreonController) diffCentreonService(resource client.Object, data map[string]interface{}, meta interface{}) (diff controller.Diff, err error) {
	var d any

	diff = controller.Diff{
		NeedCreate: false,
		NeedUpdate: false,
	}

	d, err = helper.Get(data, "centreonServiceCompareResources")
	if err != nil {
		return diff, err
	}
	listCompareResource := d.([]CompareResource)
	if listCompareResource == nil {
		return diff, nil
	}

	var sb strings.Builder

	for _, compareResource := range listCompareResource {

		// New CentreonService
		if reflect.ValueOf(compareResource.Current).IsNil() {
			compareResource.Diff.NeedCreate = true
			compareResource.Diff.Diff = fmt.Sprintf("CentreonService %s not exist", compareResource.Expected.GetName())
			diff.NeedCreate = true
			sb.WriteString(compareResource.Diff.Diff)
		} else {
			// EDxisting CentreonService
			diffSpec := cmp.Diff(compareResource.Current.(*v1alpha1.CentreonService).Spec, compareResource.Expected.(*v1alpha1.CentreonService).Spec)
			diffLabels := cmp.Diff(compareResource.Current.GetLabels(), compareResource.Expected.GetLabels())
			diffAnnotations := cmp.Diff(compareResource.Current.GetAnnotations(), compareResource.Expected.GetAnnotations())
			if diffSpec != "" || diffLabels != "" || diffAnnotations != "" {
				compareResource.Diff.NeedUpdate = true
				compareResource.Diff.Diff = fmt.Sprintf("%s\n%s\n%s", diffLabels, diffAnnotations, diffSpec)
				compareResource.Current.SetLabels(compareResource.Expected.GetLabels())
				compareResource.Current.SetAnnotations(compareResource.Expected.GetAnnotations())
				compareResource.Current.(*v1alpha1.CentreonService).Spec = compareResource.Expected.(*v1alpha1.CentreonService).Spec
				diff.NeedUpdate = true
				sb.WriteString(compareResource.Diff.Diff)
			}
		}

	}

	diff.Diff = sb.String()

	return diff, nil

}
