package controllers

import (
	"context"
	"errors"
	"time"

	"github.com/disaster37/go-centreon-rest/v21/models"
	"github.com/disaster37/monitoring-operator/api/v1alpha1"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

func (t *ControllerTestSuite) TestCentreonServiceAddController() {
	var err error
	activated := true
	disabled := false
	centreonServiceName := "t-centreon-service-" + v1alpha1.RandomString(10)
	key := types.NamespacedName{
		Name:      centreonServiceName,
		Namespace: "default",
	}

	// Mock Get
	gomock.InOrder(
		// For create
		t.mockService.EXPECT().Get(gomock.Eq("central"), gomock.Eq("ping")).Return(nil, nil),
		t.mockService.EXPECT().Get(gomock.Eq("central"), gomock.Eq("ping")).Return(&models.ServiceGet{
			ServiceBaseGet: &models.ServiceBaseGet{
				HostName:            "central",
				Name:                "ping",
				CheckCommand:        "ping",
				Activated:           "1",
				ActiveCheckEnabled:  "default",
				PassiveCheckEnabled: "default",
				CheckCommandArgs:    "!arg1",
				NormalCheckInterval: "30s",
				RetryCheckInterval:  "1s",
				MaxCheckAttempts:    "3",
			}}, nil),
		// For update
		t.mockService.EXPECT().Get(gomock.Eq("central"), gomock.Eq("ping")).Return(&models.ServiceGet{
			ServiceBaseGet: &models.ServiceBaseGet{
				HostName:            "central",
				Name:                "ping",
				CheckCommand:        "ping",
				Activated:           "1",
				ActiveCheckEnabled:  "default",
				PassiveCheckEnabled: "default",
				CheckCommandArgs:    "!arg1",
				NormalCheckInterval: "30s",
				RetryCheckInterval:  "1s",
				MaxCheckAttempts:    "3",
			}}, nil),
		t.mockService.EXPECT().Get(gomock.Eq("central"), gomock.Eq("ping")).Return(&models.ServiceGet{
			ServiceBaseGet: &models.ServiceBaseGet{
				HostName:            "central",
				Name:                "ping",
				CheckCommand:        "ping2",
				Activated:           "0",
				ActiveCheckEnabled:  "default",
				PassiveCheckEnabled: "default",
				CheckCommandArgs:    "!arg2",
				NormalCheckInterval: "35s",
				RetryCheckInterval:  "2s",
				MaxCheckAttempts:    "4",
			}}, nil),
	)

	// Mock add service on Centreon
	t.mockService.EXPECT().
		Add(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("my-template")).
		Return(nil)

	// Mock set params on Centreon
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("check_command"), gomock.Eq("ping")).
			Return(nil),

		// Update
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("check_command"), gomock.Eq("ping2")).
			Return(nil),
	)
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("normal_check_interval"), gomock.Eq("30s")).
			Return(nil),
		//Update
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("normal_check_interval"), gomock.Eq("35s")).
			Return(nil),
	)
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("retry_check_interval"), gomock.Eq("1s")).
			Return(nil),
		//Update
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("retry_check_interval"), gomock.Eq("2s")).
			Return(nil),
	)
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("max_check_attempts"), gomock.Eq("3")).
			Return(nil),
		// Update
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("max_check_attempts"), gomock.Eq("4")).
			Return(nil),
	)
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("check_command_arguments"), gomock.Eq("!arg1")).
			Return(nil),
		// Update
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("check_command_arguments"), gomock.Eq("!arg2")).
			Return(nil),
	)
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("activate"), gomock.Eq("1")).
			Return(nil),
		// Update
		t.mockService.EXPECT().
			SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("activate"), gomock.Eq("0")).
			Return(nil),
	)
	// Create
	t.mockService.EXPECT().
		SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("active_checks_enabled"), gomock.Eq("default")).
		Return(nil)
	t.mockService.EXPECT().
		SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("passive_checks_enabled"), gomock.Eq("default")).
		Return(nil)
	t.mockService.EXPECT().
		SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("comment"), gomock.Any()).
		Return(nil)
		// Update
	t.mockService.EXPECT().
		SetParam(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("template"), gomock.Eq("my-template2")).
		Return(nil)

	// Mock set service groups
	gomock.InOrder(
		//Create
		t.mockService.EXPECT().
			SetServiceGroups(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq([]string{"sg1"})).
			Return(nil),
		//Update
		t.mockService.EXPECT().
			SetServiceGroups(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq([]string{"sg2"})).
			Return(nil),
	)

	// Mock set categories
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetCategories(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq([]string{"cat1"})).
			Return(nil),
		//Update
		t.mockService.EXPECT().
			SetCategories(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq([]string{"cat2"})).
			Return(nil),
	)

	//Mock set macros
	gomock.InOrder(
		// Create
		t.mockService.EXPECT().
			SetMacro(gomock.Eq("central"), gomock.Eq("ping"), gomock.Any()).
			Return(nil),
		//Update
		t.mockService.EXPECT().
			SetMacro(gomock.Eq("central"), gomock.Eq("ping"), gomock.Any()).
			Return(nil),
	)

	// Mock get params
	gomock.InOrder(
		//Create
		t.mockService.EXPECT().
			GetParam(gomock.Eq("central"), gomock.Eq("ping"), []string{"template"}).
			Return(map[string]string{"template": "my-template"}, nil),
		//Update
		t.mockService.EXPECT().
			GetParam(gomock.Eq("central"), gomock.Eq("ping"), []string{"template"}).
			Return(map[string]string{"template": "my-template"}, nil),
		t.mockService.EXPECT().
			GetParam(gomock.Eq("central"), gomock.Eq("ping"), []string{"template"}).
			Return(map[string]string{"template": "my-template2"}, nil),
	)

	// Mock get macros
	gomock.InOrder(
		//Create
		t.mockService.EXPECT().
			GetMacros(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]*models.Macro{
				{
					Name:       "macro1",
					Value:      "value",
					IsPassword: "0",
				},
			}, nil),
		// Update
		t.mockService.EXPECT().
			GetMacros(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]*models.Macro{
				{
					Name:       "macro1",
					Value:      "value",
					IsPassword: "0",
				},
			}, nil),
		t.mockService.EXPECT().
			GetMacros(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]*models.Macro{
				{
					Name:       "macro2",
					Value:      "value",
					IsPassword: "0",
				},
			}, nil),
	)

	// Mock get Categories
	gomock.InOrder(
		//Create
		t.mockService.EXPECT().
			GetCategories(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]string{"cat1"}, nil),
		//Update
		t.mockService.EXPECT().
			GetCategories(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]string{"cat1"}, nil),
		t.mockService.EXPECT().
			GetCategories(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]string{"cat2"}, nil),
	)

	// Mock get service groups
	gomock.InOrder(
		//Create
		t.mockService.EXPECT().
			GetServiceGroups(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]string{"sg1"}, nil),
		//Update
		t.mockService.EXPECT().
			GetServiceGroups(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]string{"sg1"}, nil),
		t.mockService.EXPECT().
			GetServiceGroups(gomock.Eq("central"), gomock.Eq("ping")).
			Return([]string{"sg2"}, nil),
	)

	// Mock delete service groups
	t.mockService.EXPECT().
		DeleteServiceGroups(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq([]string{"sg1"})).
		Return(nil)

	// Mock delete categories
	t.mockService.EXPECT().
		DeleteCategories(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq([]string{"cat1"})).
		Return(nil)

	//Mock delete macros
	t.mockService.EXPECT().
		DeleteMacro(gomock.Eq("central"), gomock.Eq("ping"), gomock.Eq("macro1")).
		Return(nil)

	/*****
	 * Create new service that not already exist on Centreon
	 */

	toCreate := &v1alpha1.CentreonService{
		ObjectMeta: metav1.ObjectMeta{
			Name:      key.Name,
			Namespace: key.Namespace,
		},
		Spec: v1alpha1.CentreonServiceSpec{
			Name:         "ping",
			Host:         "central",
			Template:     "my-template",
			CheckCommand: "ping",
			Arguments:    []string{"arg1"},
			Groups:       []string{"sg1"},
			Categories:   []string{"cat1"},
			Macros: map[string]string{
				"macro1": "value",
			},
			Activated:           &activated,
			NormalCheckInterval: "30s",
			RetryCheckInterval:  "1s",
			MaxCheckAttempts:    "3",
		},
	}

	err = t.k8sClient.Create(context.Background(), toCreate)
	assert.NoError(t.T(), err)

	// Test that ressource have updated status
	assertWithTimeout(t.T(), func() error {
		fetched := &v1alpha1.CentreonService{}
		if err := t.k8sClient.Get(context.Background(), key, fetched); err != nil {
			t.T().Fatal(err)
		}
		if !fetched.IsSubmitted() {
			return errors.New("Not yet submitted")
		}
		assert.NotEmpty(t.T(), fetched.Status.ID)
		assert.NotEmpty(t.T(), fetched.Status.UpdatedAt)
		assert.True(t.T(), fetched.Status.IsAvailable)
		assert.True(t.T(), fetched.HasFinalizer())

		return nil

	}, time.Second*30, time.Second*1)
	time.Sleep(10 * time.Second)

	/*****
	* Update service that already exist on Centreon
	 */
	toUpdate := &v1alpha1.CentreonService{}
	err = t.k8sClient.Get(context.Background(), key, toUpdate)
	if err != nil {
		t.T().Fatal(err)
	}
	toUpdate.Spec = v1alpha1.CentreonServiceSpec{
		Name:         "ping",
		Host:         "central",
		Template:     "my-template2",
		CheckCommand: "ping2",
		Arguments:    []string{"arg2"},
		Groups:       []string{"sg2"},
		Categories:   []string{"cat2"},
		Macros: map[string]string{
			"macro2": "value",
		},
		Activated:           &disabled,
		NormalCheckInterval: "35s",
		RetryCheckInterval:  "2s",
		MaxCheckAttempts:    "4",
	}
	err = t.k8sClient.Update(context.Background(), toUpdate)
	assert.NoError(t.T(), err)
	time.Sleep(10)
}
