apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.0
  creationTimestamp: null
  name: templates.monitor.k8s.webcenter.fr
spec:
  group: monitor.k8s.webcenter.fr
  names:
    kind: Template
    listKind: TemplateList
    plural: templates
    shortNames:
    - mtmpl
    singular: template
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.type
      name: Type
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1
    schema:
      openAPIV3Schema:
        description: Template is the Schema for the templates API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: TemplateSpec defines the desired state of Template
            properties:
              name:
                description: |-
                  Deprecated: Use the full template instead to set the name
                  Name is the resource name generated from template
                type: string
              template:
                description: Template is the template to render. You can use the golang
                  template syntaxe with sprig function
                type: string
              templateDelimiter:
                description: |-
                  TemplateDelimiter is the delimiter to use when render template
                  It can be usefull if you use helm on top of them
                properties:
                  left:
                    description: Left is the left delimiter
                    minLength: 1
                    type: string
                  right:
                    description: Right is the right delimiter
                    minLength: 1
                    type: string
                required:
                - left
                - right
                type: object
              type:
                description: |-
                  Deprecated: Use full template instead to set the type
                  Type is the object type it generate from template
                type: string
            required:
            - template
            - type
            type: object
          status:
            description: TemplateStatus defines the observed state of Template
            properties:
              status:
                description: Fake status to generate bundle manifest without error
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null
