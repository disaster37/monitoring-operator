package tests

import (
	"path/filepath"
	"testing"
	"time"

	"github.com/disaster37/go-centreon-rest/v21"
	"github.com/disaster37/go-centreon-rest/v21/mocks"
	"github.com/golang/mock/gomock"
	"github.com/onsi/gomega/gexec"
	"github.com/sirupsen/logrus"
	"github.com/stretchr/testify/suite"
	"k8s.io/client-go/kubernetes/scheme"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/envtest"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"

	monitorv1alpha1 "github.com/disaster37/monitoring-operator/api/v1alpha1"
	//+kubebuilder:scaffold:imports
)

var testEnv *envtest.Environment

type ControllerTestSuite struct {
	suite.Suite
	k8sClient              client.Client
	mockClient             *mocks.MockAPI
	mockService            *mocks.MockServiceAPI
	mockCtrl               *gomock.Controller
	serviceCentreonService CentreonService
}

func TestControllerSuite(t *testing.T) {
	suite.Run(t, new(ControllerTestSuite))
}

func (t *ControllerTestSuite) SetupSuite() {
	// Init Centreon mock
	t.mockCtrl = gomock.NewController(t.T())
	t.mockClient = mocks.NewMockAPI(t.mockCtrl)
	t.mockService = mocks.NewMockServiceAPI(t.mockCtrl)
	centreonClient := &centreon.Client{
		API: t.mockClient,
	}

	logf.SetLogger(zap.New(zap.UseDevMode(true)))
	logrus.SetLevel(logrus.DebugLevel)

	// Setup testenv
	testEnv = &envtest.Environment{
		CRDDirectoryPaths:       []string{filepath.Join("..", "config", "crd", "bases")},
		ErrorIfCRDPathMissing:   true,
		ControlPlaneStopTimeout: 120 * time.Second,
	}
	cfg, err := testEnv.Start()
	if err != nil {
		panic(err)
	}

	// Add CRD sheme
	err = scheme.AddToScheme(scheme.Scheme)
	if err != nil {
		panic(err)
	}
	err = monitorv1alpha1.AddToScheme(scheme.Scheme)
	if err != nil {
		panic(err)
	}

	// Init k8smanager and k8sclient
	k8sManager, err := ctrl.NewManager(cfg, ctrl.Options{
		Scheme: scheme.Scheme,
	})
	if err != nil {
		panic(err)
	}
	k8sClient := k8sManager.GetClient()
	t.k8sClient = k8sClient

	// Init controlles
	log := logrus.WithFields(logrus.Fields{
		"type": "controllers",
		"name": "CentreonService",
	})
	t.serviceCentreonService = NewCentreonService(centreonClient, log)
	err = (&CentreonServiceReconciler{
		Client:   k8sClient,
		Recorder: k8sManager.GetEventRecorderFor("centreonservice-controller"),
		Log:      log,
		Service:  t.serviceCentreonService,
	}).SetupWithManager(k8sManager)
	if err != nil {
		panic(err)
	}

	go func() {
		err = k8sManager.Start(ctrl.SetupSignalHandler())
		if err != nil {
			panic(err)
		}
	}()
}

func (t *ControllerTestSuite) TearDownSuite() {
	gexec.KillAndWait(5 * time.Second)

	// Teardown the test environment once controller is fnished.
	// Otherwise from Kubernetes 1.21+, teardon timeouts waiting on
	// kube-apiserver to return
	err := testEnv.Stop()
	if err != nil {
		panic(err)
	}
}

func (t *ControllerTestSuite) BeforeTest(suiteName, testName string) {
	t.mockClient.EXPECT().Service().AnyTimes().Return(t.mockService)
	t.mockClient.EXPECT().Auth().AnyTimes().Return(nil)
}

func (t *ControllerTestSuite) AfterTest(suiteName, testName string) {
	defer t.mockCtrl.Finish()
}

func assertWithTimeout(t *testing.T, f func() error, timeout time.Duration, interval time.Duration) {
	control := make(chan bool)
	timeoutTimer := time.NewTimer(timeout)
	var err error
	go func() {
		loop := true
		intervalTimer := time.NewTimer(interval)
		for loop {
			select {
			case <-control:
				return
			case <-intervalTimer.C:
				err = f()
				if err != nil {
					intervalTimer.Reset(interval)
				} else {
					loop = false
				}
			}
		}
		control <- true
		return
	}()

	select {
	case <-control:
		return
	case <-timeoutTimer.C:
		control <- true
		t.Fatalf("Timeout on assertWithTimeout: %s", err.Error())
		return
	}
}
